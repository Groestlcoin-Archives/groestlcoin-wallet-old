apply plugin: 'com.android.application'
apply plugin: 'androidsvgdrawable'

def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
repositories {
    maven { url localMavenRepo }
}
dependencies {
    compile(project(':integration-android')) {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.android.support:support-annotations:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:support-v13:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'org.bitcoinj:groestlcoinj-core:0.13.4'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile('com.github.tony19:logback-android-classic:1.1.1-3') {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.github.tony19:logback-android-core:1.1.1-3'
    compile 'com.google.code.findbugs:jsr305:2.0.3'
    testCompile 'junit:junit:4.11'
}

ext {
    archivesBaseName = 'groestlcoin-wallet'
}

android {
    compileSdkVersion 'android-16'
    buildToolsVersion '23.0.2'

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    buildTypes {
        all {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
        debug {
            debuggable true
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = [new File(buildDir, 'native-libs')]
        }
        test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }
    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints'
        exclude 'org.bitcoin.test.checkpoints'
    }
}

// most important part to include .so files into the project
task copyNativeLibs(type: Copy) {
    from(new File(getProjectDir(), 'src/main/native-libs')) { include '**/*.so' }
    into new File(buildDir, 'native-libs')
}

tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
    compileTask -> compileTask.dependsOn copyNativeLibs
}

clean.dependsOn 'cleanCopyNativeLibs'
/*
tasks.withType(com.android.build.gradle.tasks.PackageApplication) {
    pkgTask ->
        pkgTask.jniFolders = new HashSet()
        pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}*/

task svgToPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = file('graphics')
    to = file('res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi']
    outputFormat = 'PNG'
}
